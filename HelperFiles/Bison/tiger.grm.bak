%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
    char cval;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT
%token <cval> CHAR

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF CONTINUE ELSE WHILE FOR RETURN SIZEOF
  TYPEDEF STRUCT SWITCH CASE 
  BREAK DEFAULT
  DEFINE INCLUDE NOT

%left COMMA
%right ASSIGN
%left OR
%left AND
%left EQ NEQ
%left LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%right SIZEOF NOT
%left DOT

%start program

%%

/* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 */

program:  fncd
        | fnc
        | program fnc
        | program fncd

stm:      exp SEMICOLON
        | exp SEMICOLON stm
        | LBRACE stm RBRACE
        | WHILE LPAREN exp RPAREN stm
        | FOR LPAREN exp SEMICOLON exp SEMICOLON exp RPAREN stm
        | swstm
        | ifstm

exp:      ID
        | INT
        | CHAR
        | STRING
        | exp COMMA exp
        | lv ASSIGN exp
        | exp OR exp
        | exp AND exp
        | exp EQ exp
        | exp NEQ exp
        | exp LT exp
        | exp LE exp
        | exp GT exp
        | exp GE exp
        | exp PLUS exp
        | exp MINUS exp
        | exp TIMES exp
        | exp DIVIDE exp
        | SIZEOF exp
        | NOT exp
        | lv DOT lv
        | fncc

lv:       ID

ifstm:    IF LPAREN exp RPAREN stm ELSE stm
        | IF LPAREN exp RPAREN stm 

swstm:    SWITCH LPAREN ID RPAREN LBRACE swcases RBRACE

swcases:  swcase
        | swcase DEFAULT COLON stm

swcase:   CASE COLON stm
        | swcase CASE COLON stm

fnc:      ID ID LPAREN prls RPAREN LBRACE stm LBRACE

fncd:     ID ID LPAREN prls RPAREN SEMICOLON

fncc:     ID LPAREN exp RPAREN

prls:     ID
        | ID ID
        | prls COMMA prls









